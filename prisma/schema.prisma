generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_LOCAL")
}

model Productos {
  id           Int     @id @default(autoincrement())
  nombre       String
  descripcion  String?
  precio       String
  id_marca     Int
  id_proveedor Int
  id_categoria Int
  imagen       String?
  cantidad String

  marca               CatalogoMarca         @relation(fields: [id_marca], references: [id_marca])
  proveedor           CatalogoProveedor     @relation(fields: [id_proveedor], references: [id_proveedor])
  categoria           CatalogoCategoria     @relation(fields: [id_categoria], references: [id_categoria])
  inventario          Inventario[]
  detallesVenta       DetalleVenta[]
  detalleVentaPorcion DetalleVentaPorcion[]
  // Agregar la relación inversa en Productos
  // detallesVenta: DetalleVenta[]
}

model CatalogoProveedor {
  id_proveedor Int     @id @default(autoincrement())
  nombre       String  @unique
  nomenclatura String  @unique
  direccion    String
  ciudad       String
  estado       String
  telefono     String
  email        String?

  productos Productos[]
}

model CatalogoMarca {
  id_marca     Int    @id @default(autoincrement())
  nombre       String @unique
  nomenclatura String @unique

  productos Productos[]
}

model CatalogoCategoria {
  id_categoria Int    @id @default(autoincrement())
  nombre       String @unique
  nomenclatura String @unique

  productos Productos[]
}

model Inventario {
  id_inventario Int    @id @default(autoincrement())
  id_producto   Int    @unique @default(autoincrement())
  existencias   String
  StockMinimo   String
  StockMaximo   String

  producto Productos @relation(fields: [id_producto], references: [id])

  detallesVenta DetalleVenta[]
}

model DetalleVenta {
  id_detalleVenta  Int    @id @default(autoincrement())
  id_venta         Int    @unique
  id_producto      Int
  cantidad_vendida String
  precio_producto  String
  subtotal         String

  venta                Venta                 @relation(fields: [id_venta], references: [id_venta])
  productoInventario   Inventario            @relation(fields: [id_producto], references: [id_producto])
  detallesVentaPorcion DetalleVentaPorcion[]
  Productos            Productos?            @relation(fields: [productosId], references: [id])
  productosId          Int?
}

model DetalleVentaPorcion {
  id_detalleVentaPorcion Int    @id @default(autoincrement())
  id_detalleVenta        Int
  id_producto            Int
  cantidad_vendida       String

  detalleVenta  DetalleVenta @relation(fields: [id_detalleVenta], references: [id_venta])
  Venta         Venta?       @relation(fields: [ventaId_venta], references: [id_venta])
  ventaId_venta Int?
  Productos     Productos?   @relation(fields: [id_producto], references: [id])
  productosId   Int?
}

model Venta {
  id_venta    Int    @id @default(autoincrement())
  id_vendedor Int    @default(autoincrement())
  id_sucursal Int    @default(autoincrement())
  fecha_venta String
  total_venta String
  subtotal    String
  iva         String

  sucursal             Sucursal              @relation(fields: [id_sucursal], references: [id_sucursal])
  vendedor             CatalogoVendedor      @relation(fields: [id_vendedor], references: [id_vendedor])
  detallesVenta        DetalleVenta[]
  detallesVentaPorcion DetalleVentaPorcion[]

  // Agregar la relación inversa en Venta
  // detallesVenta: DetalleVenta[]
  // detallesVentaPorcion: DetalleVentaPorcion[]
}

model CatalogoVendedor {
  id_vendedor  Int     @id @default(autoincrement())
  id_usuario   Int     
  acronimo     String  @unique
  permisoVenta Boolean

  usuario User    @relation(fields: [id_usuario], references: [id_usuario])
  ventas  Venta[]
}

model Sucursal {
  id_sucursal  Int    @id @default(autoincrement())
  nombre       String
  direccion    String
  ciudad       String
  estado       String
  codigoPostal String
  telefono     String
  encargado    String

  ventas Venta[]
}

model User {
  id_usuario Int     @id @default(autoincrement())
  email      String  @unique
  password   String
  nombre     String
  apellido   String
  telefono   String
  direccion  String
  imagen     String?

  vendedor CatalogoVendedor[]
}
